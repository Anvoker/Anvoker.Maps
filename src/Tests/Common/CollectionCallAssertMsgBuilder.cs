using System;
using System.Text;

namespace Anvoker.Collections.Tests.Common
{
    /// <summary>
    /// A delegate to a method that can build an assert message
    /// appropriate for reporting failure when a method is called with various
    /// arguments and all of the calls are expected to return one specific
    /// value.
    /// </summary>
    /// <param name="args">The text representations of the arguments
    /// used in the call.</param>
    /// <param name="argsDisplayName">A title that can be prefixed
    /// to the arguments.</param>
    /// <param name="methodDisplayName">The name of the method call that
    /// generated the returns.</param>
    /// <param name="expectedReturn">The text representations of the
    /// values of the expected returns.</param>
    /// <param name="differingReturns">An array of bools where true values
    /// indicate indices at which the return differed from the expected
    /// value.</param>
    /// <param name="actualReturns">The text representations of the actual
    /// return values generated by the method.</param>
    /// <returns>The built assert message.</returns>
    public delegate string ManyArgsOneReturnMsgBuild(
        string[] args,
        string argsDisplayName,
        string methodDisplayName,
        string expectedReturn,
        bool[] differingReturns,
        string[] actualReturns);

    /// <summary>
    /// Encapsulates the data and method required to build an assert message
    /// appropriate for reporting failure when a method is called with various
    /// arguments and all of the calls are expected to return one specific
    /// value.
    /// </summary>
    public class ManyArgsOneReturnMsgBuilder<TReturn>
    {
        private ManyArgsOneReturnMsgBuild buildMethod;

        /// <summary>
        /// Initializes a new instance of the
        /// <see cref="CollectionCallAssertMsgBuilder{TElement, TReturn}"/>
        /// class with the default message builder and the specified
        /// element and return string conversion methods.
        /// </summary>
        /// <param name="argsToString">An array of methods that can output the
        /// text representation of the arguments.</param>
        /// <param name="returnToString">A method that can output the text
        /// representation of the return value.</param>
        public ManyArgsOneReturnMsgBuilder(
            Func<object, string>[] argsToString,
            Func<TReturn, string> returnToString)
        {
            buildMethod = DefaultBuildMethod;
            ArgsToString = argsToString;
            ReturnToString = returnToString;
        }

        /// <summary>
        /// Initializes a new instance of the
        /// <see cref="CollectionCallAssertMsgBuilder{TElement, TReturn}"/>
        /// class with the specified message builder and the specified
        /// element and return string conversion methods.
        /// </summary>
        /// <param name="buildMethod">The method that builds the assert
        /// message.</param>
        /// <param name="argsToString">An array of methods that can output the
        /// text representation of the arguments.</param>
        /// <param name="returnToString">A method that can output the text
        /// representation of the return value.</param>
        public ManyArgsOneReturnMsgBuilder(
            ManyArgsOneReturnMsgBuild buildMethod,
            Func<object, string>[] argsToString,
            Func<TReturn, string> returnToString)
        {
            this.buildMethod = buildMethod;
            ArgsToString = argsToString;
            ReturnToString = returnToString;
        }

        private ManyArgsOneReturnMsgBuilder()
        {
        }

        /// <summary>
        /// Gets the default builder.
        /// </summary>
        public static ManyArgsOneReturnMsgBuilder<TReturn>
            Default
        { get; }
            = new ManyArgsOneReturnMsgBuilder<TReturn>()
            {
                buildMethod = DefaultBuildMethod,
                ArgsToString = null,
                ReturnToString = null
            };

        /// <summary>
        /// Gets a delegate containing a method that can output the text
        /// representation of the arguments.
        /// </summary>
        public Func<object, string>[] ArgsToString { get; private set; }

        /// <summary>
        /// Gets a delegate containing a method that can output the text
        /// representation of a return value of type
        /// <typeparamref name="TReturn"/>.
        /// </summary>
        public Func<TReturn, string> ReturnToString { get; private set; }

        /// <summary>
        /// Builds an assert message appropriate for reporting failure when a
        /// method is called with various arguments and all of the calls are
        /// expected to return a specific value.
        /// </summary>
        /// <param name="args">The text representations of the arguments
        /// used in the call.</param>
        /// <param name="argsDisplayName">A title that can be prefixed
        /// to the arguments.</param>
        /// <param name="methodDisplayName">The name of the method call that
        /// generated the returns.</param>
        /// <param name="expectedReturn">The text representations of the
        /// values of the expected returns.</param>
        /// <param name="differingReturns">An array of bools where true
        /// values indicate indices at which the return differed from the
        /// expected value.</param>
        /// <param name="actualReturns">The text representations of the
        /// actual return values generated by the method.</param>
        /// <returns>The built assert message.</returns>
        public string Build(
            string[] args,
            string argsDisplayName,
            string methodDisplayName,
            string expectedReturn,
            bool[] differingReturns,
            string[] actualReturns)
            => buildMethod(
                args,
                argsDisplayName,
                methodDisplayName,
                expectedReturn,
                differingReturns,
                actualReturns);

        private static string DefaultBuildMethod(
            string[] args,
            string elementDisplayName,
            string methodDisplayName,
            string expectedReturn,
            bool[] differingReturns,
            string[] actualReturns)
        {
            if (args.Length != differingReturns.Length)
            {
                throw new ArgumentException("Count of args cannot differ " +
                    "from count of differing returns. " +
                    $"{args.Length} vs {differingReturns.Length}.");
            }

            if (args.Length != actualReturns.Length)
            {
                throw new ArgumentException("Count of args cannot differ " +
                    "from count of actual returns. " +
                    $"{args.Length} vs {actualReturns.Length}.");
            }

            var stringBuilder = new StringBuilder();
            stringBuilder.AppendLine().Append("{");
            for (int i = 0; i < args.Length; i++)
            {
                stringBuilder.AppendLine()
                    .Append("    ")
                    .Append(differingReturns[i] ? "FAILED " : "PASSED ")
                    .Append(elementDisplayName).Append(": ")
                    .Append(args[i]);
                stringBuilder.Append(" ACTUAL: ").Append(actualReturns[i]);
            }

            stringBuilder.AppendLine().Append("}");
            return $"{methodDisplayName} method should have " +
                $"returned {expectedReturn} but didn't on at least one of " +
                $"the inputs: {stringBuilder}.";
        }
    }
}
